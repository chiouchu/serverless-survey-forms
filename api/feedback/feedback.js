'use strict';
/**
 * Created by PHE on 2016/7/7.
 */

module.exports = (() => {
  let aws = null;

  const initAWS = (AWS) => {
    aws = AWS;
  };

  // Convert DynamoDB error code into Error object
  const getDynamoDBError = (err) => {
    if (err.statusCode === 400) {
      switch (err.code) {
        case "AccessDeniedException":
        case "UnrecognizedClientException":
          return new Error("401 Unauthorized: Unable to access an item with error: " + JSON.stringify(err));
          break;
        default:
          return new Error("400 Bad Request: Unable to access an item with error: " + JSON.stringify(err));
      }
    } else { // 500, 503
      return new Error("500 Internal Server Error: Unable to access an item with error: " + JSON.stringify(err));
    }
  };

  /**
   * Parameters:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   *
   * Response:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   * feedback   The details of the feedback model in JSON format
   * datetime   The latest modified date time of the feedback.
   */
  const getOneFeedback = (event, callback) => {
    let response = null;

    return callback(null, response);
  };

  /**
   * Parameters:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * startKey   If your query amount to more than 1 MB of data, you'll need to perform another query request for the next 1 MB of data.
   *            To do this, take the lastEvaluatedKey value from the previous request, and use that value as the startKey in the next request.
   *            This approach will let you progressively query for new data in 1 MB increments.
   *
   * Response:
   * Key        Description
   * feedbacks  An array of feedbacks objects (see below)
   *
   * Each object in the feedback array contains:
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   * datetime   The latest modified date time of the feedback.
   */
  const listFeedbacks = (event, callback) => {
    let response = null;

    return callback(null, response);
  };

  /**
   * Parameters:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   * feedback   The details of the feedback model in JSON format
   *
   * Response:
   * Key        Description
   * datetime   The latest modified date time of the feedback.
   */
  const addOneFeedback = (event, callback) => {
    let response = null;

    return callback(null, response);
  };

  /**
   * Parameters:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   * feedback   The details of the feedback model in JSON format
   *
   * Response:
   * Key        Description
   * datetime   The latest modified date time of the feedback.
   */
  const updateOneFeedback = (event, callback) => {
    let response = null;

    return callback(null, response);
  };

  /**
   * Parameters:
   * Key        Description
   * surveyid   an uuid is generated by backend and associate to a survey as it creates first time.
   * clientid   an unique identify for client app, or browser.
   *
   * Response:
   * None
   */
  const deleteOneFeedback = (event, callback) => {
    let response = {};

    return callback(null, response);
  };





  return {
    initAWS: initAWS,

    getOneFeedback: getOneFeedback,
    listFeedbacks: listFeedbacks,

    addOneFeedback: addOneFeedback,
    updateOneFeedback: updateOneFeedback,
    deleteOneFeedback: deleteOneFeedback
  };
})();